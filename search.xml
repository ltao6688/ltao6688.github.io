<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux下解决gitbash乱码</title>
      <link href="/2021/07/31/linux-xia-jie-jue-gitbash-luan-ma/"/>
      <url>/2021/07/31/linux-xia-jie-jue-gitbash-luan-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="linux下解决gitbash乱码"><a href="#linux下解决gitbash乱码" class="headerlink" title="linux下解决gitbash乱码"></a>linux下解决gitbash乱码</h1><p>切换到 ubuntu 有一段时间了，最近用 vscode 写代码使用 git commit 时发现文件名和日志乱码。会把中文显示为一串数字。</p><p>这个时候只需要添加相应的配置即可显示正常的中文，执行以下命令即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global core.quotepath <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者手动修改配置文件 ~/.gitconfig，添加以下内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>core<span class="token punctuation">]</span>    quotepath <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 日期 字符串 时间戳互传</title>
      <link href="/2020/12/15/mysql-ri-qi-zi-fu-chuan-shi-jian-chuo-hu-chuan/"/>
      <url>/2020/12/15/mysql-ri-qi-zi-fu-chuan-shi-jian-chuo-hu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-日期-字符串-时间戳互传"><a href="#mysql-日期-字符串-时间戳互传" class="headerlink" title="mysql 日期 字符串 时间戳互传"></a>mysql 日期 字符串 时间戳互传</h1><p>平时比较常用的时间、字符串、时间戳之间的互相转换，虽然常用但是几乎每次使用时候都喜欢去搜索一下用法；本文将作为一个笔记，整理一下三者之间的 转换（即：date转字符串、date转时间戳、字符串转date、字符串转时间戳、时间戳转date，时间戳转字符串）用法，方便日后查看；</p><h3 id="涉及的函数"><a href="#涉及的函数" class="headerlink" title="涉及的函数"></a>涉及的函数</h3><pre class="line-numbers language-sql"><code class="language-sql">date_format<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span> format<span class="token punctuation">)</span> 函数，MySQL日期格式化函数date_format<span class="token punctuation">(</span><span class="token punctuation">)</span>unix_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数str_to_date<span class="token punctuation">(</span>str<span class="token punctuation">,</span> format<span class="token punctuation">)</span> 函数from_unixtime<span class="token punctuation">(</span>unix_timestamp<span class="token punctuation">,</span> format<span class="token punctuation">)</span> 函数，MySQL时间戳格式化函数from_unixtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间转字符串"><a href="#时间转字符串" class="headerlink" title="时间转字符串"></a>时间转字符串</h3><p>`<br>select date_format(now(), ‘%Y-%m-%d’);</p><p>结果：2020-12-15<br>`</p><h3 id="时间转时间戳"><a href="#时间转时间戳" class="headerlink" title="时间转时间戳"></a>时间转时间戳</h3><p><code>select unix_timestamp(now());</code></p><p><code>//结果：1608041813</code></p><h3 id="字符串转时间戳"><a href="#字符串转时间戳" class="headerlink" title="字符串转时间戳"></a>字符串转时间戳</h3><p>`select unix_timestamp(‘2020-12-15’);</p><p> <code>//结果：1608041813</code></p><h3 id="时间戳转时间"><a href="#时间戳转时间" class="headerlink" title="时间戳转时间"></a>时间戳转时间</h3><p><code>select from_unixtime(1608041813);</code></p><p><code>//结果：2020-12-15 20:45:24</code></p><h3 id="时间戳转字符串"><a href="#时间戳转字符串" class="headerlink" title="时间戳转字符串"></a>时间戳转字符串</h3><p><code>select from_unixtime(1608041813,'%Y-%d');</code></p><p><code>//结果：2020-12-15 20:45:24</code></p><h1 id="附表"><a href="#附表" class="headerlink" title="附表"></a>附表</h1><h3 id="MySQL日期格式化（format）取值范围。"><a href="#MySQL日期格式化（format）取值范围。" class="headerlink" title="MySQL日期格式化（format）取值范围。"></a>MySQL日期格式化（format）取值范围。</h3><pre class="line-numbers language-sql"><code class="language-sql">值   含义秒   <span class="token operator">%</span>S、<span class="token operator">%</span>s   两位数字形式的秒（ <span class="token number">00</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">59</span>）分   <span class="token operator">%</span>I、<span class="token operator">%</span>i   两位数字形式的分（ <span class="token number">00</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">59</span>）小时  <span class="token operator">%</span>H  <span class="token number">24</span>小时制，两位数形式小时（<span class="token number">00</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">23</span>）<span class="token operator">%</span>h  <span class="token number">12</span>小时制，两位数形式小时（<span class="token number">00</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">12</span>）<span class="token operator">%</span>k  <span class="token number">24</span>小时制，数形式小时（<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">23</span>）<span class="token operator">%</span>l  <span class="token number">12</span>小时制，数形式小时（<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">12</span>）<span class="token operator">%</span>T  <span class="token number">24</span>小时制，时间形式（HH:mm:ss）<span class="token operator">%</span>r   <span class="token number">12</span>小时制，时间形式（hh:mm:ss AM 或 PM）<span class="token operator">%</span>p  AM上午或PM下午  周      <span class="token operator">%</span>W 一周中每一天的名称（Sunday<span class="token punctuation">,</span>Monday<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>Saturday） <span class="token operator">%</span><span class="token number">a</span> 一周中每一天名称的缩写（Sun<span class="token punctuation">,</span>Mon<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>Sat）<span class="token operator">%</span>w  以数字形式标识周（<span class="token number">0</span><span class="token operator">=</span>Sunday<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">=</span>Monday<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">=</span>Saturday）<span class="token operator">%</span>U  数字表示周数，星期天为周中第一天<span class="token operator">%</span>u  数字表示周数，星期一为周中第一天天   <span class="token operator">%</span><span class="token number">d</span>  两位数字表示月中天数（<span class="token number">01</span><span class="token punctuation">,</span><span class="token number">02</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">31</span>）<span class="token operator">%</span><span class="token number">e</span>   数字表示月中天数（<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">31</span>） <span class="token operator">%</span>D 英文后缀表示月中天数（1st<span class="token punctuation">,</span>2nd<span class="token punctuation">,</span>3rd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>） <span class="token operator">%</span>j 以三位数字表示年中天数（<span class="token number">001</span><span class="token punctuation">,</span><span class="token number">002</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">366</span>）月   <span class="token operator">%</span>M  英文月名（January<span class="token punctuation">,</span>February<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>December）<span class="token operator">%</span><span class="token number">b</span>  英文缩写月名（Jan<span class="token punctuation">,</span>Feb<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token keyword">Dec</span>）<span class="token operator">%</span>m  两位数字表示月份（<span class="token number">01</span><span class="token punctuation">,</span><span class="token number">02</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">12</span>）<span class="token operator">%</span><span class="token number">c</span>  数字表示月份（<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">12</span>）年   <span class="token operator">%</span>Y  四位数字表示的年份（<span class="token number">2015</span><span class="token punctuation">,</span><span class="token number">2016</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>）<span class="token operator">%</span>y   两位数字表示的年份（<span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>）文字输出    <span class="token operator">%</span>文字     直接输出文字内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java IO(二) 字节流 OutputStream</title>
      <link href="/2020/08/31/java-io-er-zi-jie-liu-outputstream/"/>
      <url>/2020/08/31/java-io-er-zi-jie-liu-outputstream/</url>
      
        <content type="html"><![CDATA[<h1 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h1><p>OutputStream 继承关系图</p><p><img src="https://cdn.jsdelivr.net/gh/ltao6688/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/ltao6688/blogPic/master/blog/img/20200901215357.png" alt="继承关系图"></p><p>OutputStream 实现了 Closeable 和 Flushable 接口，代表着可关闭，可冲刷。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 写入一个字节，可以看到这里的参数是一个 int 类型，对应上面的读方法，int 类型的 32 位，只有低 // 8 位才写入，高 24 位将舍弃。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将数组中的所有字节写入，和上面对应的 read() 方法类似，实际调用的也是下面的方法。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将 byte 数组从 off 位置开始，len 长度的字节写入</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 强制刷新，将缓冲中的数据写入</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 关闭输出流，流被关闭后就不能再输出数据了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码角度，与输入流的 read 方法相同，提供只有一个参数的write方法，并将另外两个参数设置默认值为0。在真正被调用的 <code>write(byte[], int off, int len)</code> 方法会调用抽象方法<code>write(byte)</code>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流OutputStream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java IO(一) 字节流 Inputstream</title>
      <link href="/2020/08/08/java-io-yi-zi-jie-liu-inputstream/"/>
      <url>/2020/08/08/java-io-yi-zi-jie-liu-inputstream/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-IO-概述分类："><a href="#Java-IO-概述分类：" class="headerlink" title="Java IO 概述分类："></a>Java IO 概述分类：</h1><p>1．java.io 包中阻塞型 IO；</p><p>2．java.nio 包中的非阻塞型 IO，通常称为 New IO。这里只考虑到 java.io 包中阻塞型 IO</p><p>在 JDK 中1.8 的版本中，该目录下共有 86 个类(或接口)。以下是整个 IO 体系的简单分类：</p><p>从数据传输方式或者说是运输方式角度看，可以将 IO 类分为:</p><ul><li>读写字节：InputStream 和 OutputStream</li><li>读写字符(Unicode)：Reader 和 Writer</li></ul><p>在了解这几个类之前，我们先搞清楚 Java 中的字符与字节的关系。</p><h2 id="Char占几个字节？"><a href="#Char占几个字节？" class="headerlink" title="Char占几个字节？"></a>Char占几个字节？</h2><p>之前在 String 源码中分析过，JDK8 中 String 类用的是 char 数组来存储字符值的，到 JDK9 才开始用 byte 数组来存储。这里有一个问题，在 Java 中的 char 究竟占几个字节？毕竟 c++ 中的 char 只占一个字节。对于 char 这个类型，在 Java 中是用来表示字符的，可是世界上有那么多字符，如果有一个char 只用一个字节来表示，那么就意味着只能存储 256 种，显然不合适，而如果有两个字节，那么就可以存储 65536 种。这个数量符合大多数国家的语言字符的个数。于是 Java 团队默认使用 unicode作为编码，一个 char 作为 2 字节来存储。 这里就有两个问题了：</p><ul><li>java的char一定会有两个字节吗?</li><li>中文字符可以存储在char里面吗?</li></ul><p>先来回答第一个问题。char 一定是两个字节吗?不是的，这个跟我们选用的字符编码有关，如果采用 ”ISO-8859-1” 编码，那么一个 char 只会有一个字节。如果采用 ”UTF-8” 或者  “GB2312”、“GBK”  等编码格式呢?这几种编码格式采用的是动态长度的，如果是英文字符，大家都是一个字节。如果是中文，”UTF-8” 是三个字，而  ”GBK”  和  ”GB2312”  是两个字节。而对于  ”unicode”  而言，无论如何都是两个字节。 然后再回答第二个问题，对于一个 char 如果用  ”ISO-8859-1”  来存储的话，肯定无法存储一个中文，而对于 ”UTF-8”、“GB2312”、“GBK”  而言大多数中文字符是可以存储的。</p><h1 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h1><p>来看一下类的继承图：</p><p><img src="https://cdn.jsdelivr.net/gh/ltao6688/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/ltao6688/blogPic/master/blog/img/20200901222908.png" alt="类的继承图"></p><p>事实上，由于 InputStream 是整个继承体系中的顶层类，同时根据数据源的不同，每一种数据源都从InputStream 派生了子类，导致了整个 IO 体系的庞大。但是，虽然整个继承体系很庞大，它还是有迹可循的。做过关于IO操作的读者知道，我们很少单独使用哪个类来实现 IO 操作，平时都是几个类合起来使用，这其实体现了一种装饰器模式 (<em>Decorator pattern</em>)。</p><p>例如，输入流在默认情况下是不被缓冲区缓存的，也就是说，每次请求读字节时都会使得操作系统再分发一个字节。相比之下，请求一个数据块并将其置于缓冲区会显得更加高效。如果我们想使用缓冲机制，以及用于文件的数据输入流，那么就需要使用下面这种相当恐怖的构造器序列：</p><pre class="line-numbers language-java"><code class="language-java">DataInputStream din <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>                            <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>                                <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样确实显得很麻烦，但是却带来了极大的灵活性，健壮优美符合设计模式(~~最啰嗦的语言，没有之一)。不多说了，我们还是继续看源码吧:)</p><p>InputStream 类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 读取数据 具体子类实现</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/**     将读取到的数据放在 byte 数组中，实际上是调用 read(byte b[], int off, int len)，并将     偏移量与读取长度设置为 0。在真正被调用的 read(byte[], int, int)中，会调用第一行的抽象      read() 方法，该抽象方法会被子类实现。*/</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从第 off 位置读取 len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 跳过指定个数的字节不读取，想想看电影跳过片头片尾</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回可读的字节数量</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 读取完，关闭流，释放资源</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readlimit<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 标记读取位置，下次还可以从这里开始读取，使用前要看当前流是否支持，可以使用 markSupport() 方法判断</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 重置读取位置为上次 mark 标记的位置</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 判断当前流是否支持标记流，和上面两个方法配套使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SKIP_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//用于skip方法，和skipBuffer相关</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> skipBuffer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// skipBuffer is initialized in skip(long), if needed.</span>    <span class="token comment" spellcheck="true">//从输入流中读取下一个字节，</span>    <span class="token comment" spellcheck="true">//正常返回0-255，到达文件的末尾返回-1</span>    <span class="token comment" spellcheck="true">//在流中还有数据，但是没有读到时该方法会阻塞(block)</span>    <span class="token comment" spellcheck="true">//Java IO和New IO的区别就是阻塞流和非阻塞流</span>    <span class="token comment" spellcheck="true">//抽象方法！不同的子类不同的实现！</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//将流中的数据读入放在byte数组的第off个位置先后的len个位置中</span>    <span class="token comment" spellcheck="true">//放回值为放入字节的个数。</span>    <span class="token comment" spellcheck="true">//这个方法在利用抽象方法read，某种意义上简单的Templete模式。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//检查输入是否正常。一般情况下，检查输入是方法设计的第一步</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>off <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">></span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> off<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//读取下一个字节</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//到达文件的末端返回-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//放回的字节downcast                           </span>        b<span class="token punctuation">[</span>off<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//已经读取了一个字节                                                   </span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                                                <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//最多读取len个字节，所以要循环len次</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//每次循环从流中读取一个字节</span>                <span class="token comment" spellcheck="true">//由于read方法阻塞，</span>                <span class="token comment" spellcheck="true">//所以read(byte[],int,int)也会阻塞</span>                c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//到达末尾，理所当然放回-1                                       </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">//读到就放入byte数组中</span>                b<span class="token punctuation">[</span>off <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ee<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//利用上面的方法read(byte[] b)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>                              <span class="token comment" spellcheck="true">//方法内部使用的、表示要跳过的字节数目，</span>     <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">long</span> remaining <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token keyword">int</span> nr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>skipBuffer <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//初始化一个跳转的缓存</span>        skipBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>SKIP_BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//本地化的跳转缓存</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> localSkipBuffer <span class="token operator">=</span> skipBuffer<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//检查输入参数，应该放在方法的开始                            </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>                                     <span class="token comment" spellcheck="true">//一共要跳过n个，每次跳过部分，循环       </span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>remaining <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                  nr <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>localSkipBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>SKIP_BUFFER_SIZE<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//利用上面的read(byte[],int,int)方法尽量读取n个字节  </span>            <span class="token comment" spellcheck="true">//读到流的末端，则返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//没有完全读到需要的，则继续循环</span>            remaining <span class="token operator">-=</span> nr<span class="token punctuation">;</span>                                               <span class="token punctuation">}</span>               <span class="token keyword">return</span> n <span class="token operator">-</span> remaining<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回时要么全部读完，要么因为到达文件末端，读取了部分</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询流中还有多少可以读取的字节</span>    <span class="token comment" spellcheck="true">//该方法不会block。在java中抽象类方法的实现一般有以下几种方式: </span>    <span class="token comment" spellcheck="true">//1.抛出异常(java.util)；2.“弱”实现。像上面这种。子类在必要的时候覆盖它。</span>    <span class="token comment" spellcheck="true">//3.“空”实现。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//关闭当前流、同时释放与此流相关的资源</span>    <span class="token comment" spellcheck="true">//关闭当前流、同时释放与此流相关的资源</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//markSupport可以查询当前流是否支持mark</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readlimit<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对mark过的流进行复位。只有当流支持mark时才可以使用此方法。</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"mark/reset not supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询是否支持mark</span>    <span class="token comment" spellcheck="true">//绝大部分不支持，因此提供默认实现，返回false。子类有需要可以覆盖。</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字节输入流必须提供返回下一个输入字节的 read() 方法。因为所有字节输入流的父类 InputStream 有这样一个抽象方法：public abstract int read()。</p><p><a href="https://zhuanlan.zhihu.com/p/65645107" target="_blank" rel="noopener">参考文章</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流Inputstream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github 搭建博客</title>
      <link href="/2020/08/03/hexo-github-da-jian-bo-ke/"/>
      <url>/2020/08/03/hexo-github-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>受够了第在第三方网站时充斥着各种广告，偶然间了解到了 <code>Hexo</code> 这个静态博客网站，很适合用来写作, 记录笔记,最重要的是它是免费的，里面有许多的博客主题模板，这些主题都是一些很牛的大佬们开发的，而且设计的主题都很棒，看着让我很喜欢，于是开始整理搭建自己的博客。参考了一些大神博客的源码, 中间经历了许多的坎坎坷坷，终于，将博客修改成我想要的样子，现在将博客搭建流程简单记录下分享出来，希望能帮到需要的朋友。</p><h2 id="hexo-简介"><a href="#hexo-简介" class="headerlink" title="hexo 简介"></a>hexo 简介</h2><p>1、Hexo 是基于 nodejs 的框架, 是一个快速、简洁且高效的博客框架。</p><p>2、<a href="https://hexo.io" target="_blank" rel="noopener">官方文档及官网入口</a></p><p>4、可以配置在很多地方：GitHub、Gitee、Coding 等</p><h2 id="下载-Git-和-Nodejs"><a href="#下载-Git-和-Nodejs" class="headerlink" title="下载 Git 和 Nodejs"></a>下载 Git 和 Nodejs</h2><h3 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h3><p>1、首先去官网下载 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Nodejs</a> 推荐LTS (说明：LTS 为长期支持版，Current 为当前最新版)</p><p>2、打开下载好的 Nodejs 安装文件，一路点击　Next </p><p>3、 验证安装，并测试是否加入环境变量，<code>WIN + R</code> 输入 <code>cmd</code> 进入命令行，输入命令 <code>node -v</code> 出现 <code>node</code> 版本，输入 <code>npm -v</code> 出现 <code>npm</code> 版本号，表示安装成功，如果报错，则需要将 <code>Nodejs</code> 的安装路径加入环境变量。</p><p>4、设置 <code>npm</code> 的镜像源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看 npm 的配置</span><span class="token function">npm</span> config list<span class="token comment" spellcheck="true"># 默认源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org<span class="token comment" spellcheck="true"># 临时改变镜像源</span><span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 永久设置为淘宝镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 另一种方式，编辑 ~/.npmrc 加入下面内容</span>registry <span class="token operator">=</span> https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5 、设置 npm 的内置路径，全局模块路径和缓存路径，如果你的C盘空间足够大，这一步可以略过，不改变的话，默认路径在：</p><ul><li>npm 包全局目录：C:/Users/[username]/AppData/Roaming/npm/node_modules</li><li>npm 包全局命令目录：C:/Users/[username]/AppData/Roaming/npm</li><li>npm 实际去找全局命令的目录：C:/Users/[username]/.npmrc 文件内容的 prefix 值</li><li>npm 包全局 cache 目录：C:/Users/[username]/.npmrc 文件内容的 cache 值</li></ul><p>在你 Node.js 的安装位置，新建两个文件夹，node_global 和 node_cache，我的路径是：</p><p><code>D:\Program Files\nodejs\node_globalD:\Program Files\nodejs\node_cache</code><br>然后分别执行命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> prefix<span class="token string">"D:\Program Files\nodejs\node_global"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"D:\Program Files\nodejs\node_cache"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><p>1、<a href="https://git-scm.com/" target="_blank" rel="noopener">下载 Git </a></p><p>2、安装 Git 一路 next</p><p>3、因为 Git 是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识，用户和邮箱为你的GitHub 注册的账号和邮箱，鼠标右键打开 <code>git-bash.exe</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的 GitHub 用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你注册 GitHub 的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、为 Github 账户设置 SSH key ( ssh key 是加密传输)首先检查是否生成了秘钥,如果没有生成，那么通过如下命令：<br><code>ssh-keygen -t rsa -C “你的 github 注册邮箱”</code> 连敲几下回车确认<br>5、打开你的电脑 C:\Users\Administrator.ssh 里面找到，生成成功后，可以查看 id_rsa.pub 公钥文件</p><p>6、为 GitHub 账号配置 <code>ssh_key：setting—&gt;SSH and GPG keys</code><br>7、验证是否成功输入命令：<code>ssh -T git@github.com</code><br>正常情况下会出现(有警告可以不用管)：<br><code>Hi Your Name! You've successfully authenticated, but GitHub does not provide shell access.</code></p><h2 id="本地安装-hexo-静态以及发布到-GitHub-Pages"><a href="#本地安装-hexo-静态以及发布到-GitHub-Pages" class="headerlink" title="本地安装 hexo 静态以及发布到 GitHub Pages"></a>本地安装 hexo 静态以及发布到 GitHub Pages</h2><h3 id="hexo-基本环境安装"><a href="#hexo-基本环境安装" class="headerlink" title="hexo 基本环境安装"></a>hexo 基本环境安装</h3><p>1、点击鼠标右键，选择 <code>Git Bash Here</code>，然后依次输入如下命令：<br><code>npm install -g hexo-cli</code></p><p>2、初始化 hexo 程序任意你想要保存博客文件的位置(推荐桌面,文件名随意)输入命令：<br><code>hexo init blog</code> 可以看到初始化后你的博客目录如下:</p><pre class="line-numbers language-bash"><code class="language-bash">- node_modules //依赖包- public //博客生成的静态 HTML 文件- scaffolds //生成文章的模板- <span class="token function">source</span>　// 博客源文件，主要是一些 <span class="token variable"><span class="token variable">`</span>md<span class="token variable">`</span></span> 文件    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes　// 主题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、hexo 的基本配置，在文件根目录下的 <code>_config.yml</code>，就是整个 <code>hexo</code> 框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置描述</a>。</p><h3 id="layout-（布局）"><a href="#layout-（布局）" class="headerlink" title="layout （布局）"></a>layout （布局）</h3><p>1、post </p><p>当你每一次使用代码</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它其实默认使用的是 <code>post</code> 这个布局，也就是在 <code>source</code> 文件夹下的 <code>_post</code> 里面。<code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其它布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。而 <code>new</code> 这个命令其实是：</p><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>只不过这个 <code>layout</code> 默认是 <code>post</code> 罢了。</p><p>2、page<br>如果你想另起一页，那么可以使用</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page newpage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统会自动给你在 <code>source</code> 文件夹下创建一个 <code>newpage</code> 文件夹，以及 <code>newpage</code> 文件夹中的 <code>index.md</code>，这样你访问的 <code>newpage</code> 对应的链接就是 <a href="http://xxx.xxx/newpage" target="_blank" rel="noopener">http://xxx.xxx/newpage</a></p><p>3、draft<br><code>draft</code> 是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样会在 <code>source/_draft</code> 中新建一个 <code>newdraft.md</code> 文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class="line-numbers language-bash"><code class="language-bash">hexo server --draft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本地端口中开启服务预览。<br>如果你的草稿文件写完了，想要发表到 <code>post</code> 中，</p><pre class="line-numbers language-bash"><code class="language-bash">hexo publish draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h3><p>有时候我们想换一台电脑继续写博客，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。不过，这种方法有个问题就是要是那天电脑崩了，本地源文件丢失了，比较麻烦，所以这时候就可以将博客目录下的所有源文件都上传到 <code>github</code> 上面。首先在 <code>github</code> 博客仓库下新建一个分支 <code>hexo</code>，然后 <code>git clone</code> 到本地，把 <code>.git</code> 文件夹拿出来，放在博客根目录下。<br>然后 <code>git branch -b hexo</code> 切换到 <code>hexo</code> 分支，然后 <code>git add .</code> ，然后 <code>git commit -m "xxx"</code>，最后 <code>git push origin hexo</code> 提交就行了。</p><p><strong><a href="https://shw2018.github.io/posts/6e8839eb.html#toc-heading-16" target="_blank" rel="noopener">参考文章博客和代码修改搭建</a></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
